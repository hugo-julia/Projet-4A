import gurobipy as gpimport pandas as pdimport numpy as npimport matplotlib.pyplot as pltfrom gurobipy import *#No of hoursh = 2190###INPUT####Hourly electricity production in 2016 (reference year)resultats_2016 = pd.read_csv("Données/hourly profiles with demand of 2016.csv")print(resultats_2016)resultats_2016 = resultats_2016.to_numpy()# offshore = np.zeros((8760,2))# offshore[:,1] = resultats_2016[:,1]# offshore[:,0] = resultats_2016[:,0]# onshore = np.zeros((8760,2))# onshore[:,1] = resultats_2016[:,2]# onshore[:,0] = resultats_2016[:,0]# PV = np.zeros((8760,2))# PV[:,1] = resultats_2016[:,3]# PV[:,0] = resultats_2016[:,0]# river = np.zeros((8760,2))# river[:,1] = resultats_2016[:,4]# river[:,0] = resultats_2016[:,0]# lake = np.zeros((8760,2))# lake[:,1] = resultats_2016[:,5]# lake[:,0] = resultats_2016[:,0]# biogas = np.zeros((8760,2))# biogas[:,1] = resultats_2016[:,6]# biogas[:,0] = resultats_2016[:,0]# gas = np.zeros((8760,2))# gas[:,1] = resultats_2016[:,7]# gas[:,0] = resultats_2016[:,0]# prodf = np.zeros((8760,2))# prodf[:,0] = resultats_2016[:,0]# prodf[:,1] = offshore[:,1] + onshore[:,1]+ PV[:,1] + river[:,1] + lake[:,1] + biogas[:,1] + gas[:,1] #Hourly eectricity production (robustness results)resultats_simuA = pd.read_csv("Données/simu0_ADEME_hourly_generation.csv")print(resultats_simuA)resultats_simuA = resultats_simuA.to_numpy()offshore = np.zeros((8760,2))offshore[:,1] = resultats_simuA[:,1]offshore[:,0] = resultats_simuA[:,0]onshore = np.zeros((8760,2))onshore[:,1] = resultats_simuA[:,2]onshore[:,0] = resultats_simuA[:,0]PV = np.zeros((8760,2))PV[:,1] = resultats_simuA[:,3]PV[:,0] = resultats_simuA[:,0]river = np.zeros((8760,2))river[:,1] = resultats_simuA[:,4]river[:,0] = resultats_simuA[:,0]lake = np.zeros((8760,2))lake[:,1] = resultats_simuA[:,5]lake[:,0] = resultats_simuA[:,0]biogas = np.zeros((8760,2))biogas[:,1] = resultats_simuA[:,6]biogas[:,0] = resultats_simuA[:,0]phs = np.zeros((8760,2))phs[:,1] = resultats_simuA[:,7]phs[:,0] = resultats_simuA[:,0]battery = np.zeros((8760,2))battery[:,1] = resultats_simuA[:,8]battery[:,0] = resultats_simuA[:,0]methanation = np.zeros((8760,2))methanation[:,1] = resultats_simuA[:,9]methanation[:,0] = resultats_simuA[:,0]# prodf = np.zeros((8760,2))# prodf[:,0] = resultats_2016[:,0]# prodf[:,1] = offshore[:,1] + onshore[:,1]+ PV[:,1] + river[:,1] + lake[:,1] + biogas[:,1] #VRE profilesVRE_profiles_Ademe = pd.read_csv("Données/vre_profile_scen4.csv")VRE_profiles_Ademe =VRE_profiles_Ademe.to_numpy()offshore_VRE = np.zeros(8760)offshore_VRE = VRE_profiles_Ademe[0:8760,1]onshore_VRE = np.zeros(8760)offshore_VRE = VRE_profiles_Ademe[8760:17520,1]pv_VRE = np.zeros(8760)pv_VRE = VRE_profiles_Ademe[17520:26280,1]prodf = np.zeros((8760,2))prodf[:,0] = resultats_2016[:,0]prodf[:,1] = offshore_VRE*offshore[:,1] + onshore_VRE*onshore[:,1]+ pv_VRE*PV[:,1] + river[:,1] + lake[:,1] + biogas[:,1] #Electricity demand in 2050 (ADEME)demande = pd.read_csv("Données/demand2050_ademe.csv")  demande = demande.to_numpy()##Electricity demand in 2050 (Negawatt)#demande = pd.read_csv("Données/demand2050_negawatt.csv")  #demande = demande.to_numpy()#Demande 2016#demande = np.zeros((8760,2))# demande[:,0] = np.copy(prodf[:,0])# demande[:,1] = resultats_2016[:,11]#Residual productionProduction_res = np.zeros((8760,2))Production_res[:,0] = np.copy(prodf[:,0])Production_res[:,1] = prodf[:,1] - demande[:,1]plt.plot(Production_res[:,1])plt.show()#Reduced problemPR = np.zeros((h,2))PR[:,0] = Production_res[0:h,0]PR[:,1] = Production_res[0:h,1]#Residual production profileplt.plot(PR[:,1])plt.title("Residual production profile for %d hours"%h)plt.xlabel('Hours')plt.ylabel(' Hourly residual production(GWh)')#Cost /technologya = 25.805  #phsd = 87.9481 #methanation#maximal stockxmax = 180   #valeur pour l'année 2006 (page 34, table 1.2 appendix 3)ymax = 12900#contrainte par rapport aux flux entrants et sortantRb = 6.2Db = 7.2Rm = 20Dm = 35  ### valeurs ? ???### CONSTRAINTS MATRIX ###A = np.zeros((8*h, 4*h))#contrainte de la production résiduelleI = np.eye(h)A[0:h, 0:h] = IA[0:h, h:2*h] = -IA[0:h, 2*h:3*h] = IA[0:h, 3*h:4*h] = -I#contrainte de max de stockT = np.tril(np.ones((h,h)),-1)T += IA[h:2*h, 0:h] = TA[h:2*h, h:2*h] = -TA[2*h:3*h, 2*h:3*h] = TA[2*h:3*h, 3*h:4*h] = -T#contraintes de fluxA[3*h:4*h, 0:h] = IA[4*h:5*h, h:2*h] = IA[5*h:6*h, 2*h:3*h] = IA[6*h:7*h, 3*h:4*h] = I#contraintes pour ne pas stocker ce qui n'est pas stocké#A[7*h,0:h] = -np.ones(h)#A[7*h,h:2*h] = np.ones(h)#A[7*h+1,2*h:3*h] = -np.ones(h)#A[7*h+1,3*h:4*h] = np.ones(h)#A[7*h,2*h:3*h] = -np.ones(h)#A[7*h,3*h:4*h] = np.ones(h)A[7*h:8*h, 0:h] = -TA[7*h:8*h, h:2*h] = TA[7*h:8*h, 2*h:3*h] = -TA[7*h:8*h, 3*h:4*h] = T#contrainte conservation stock (contrainte d'égalité)# E = np.zeros((2,4*h))# E[0,0] = 1# E[0,h-1] = -1# E[0,h] = 1# E[0,2*h-1] = -1# E[0,2*h] = -1# E[0,3*h-1] = 1# E[0,3*h] = -1# E[0,4*h-1] = 1# E[1,0]= 1# E[1,h]= -1# E[1,2*h] = 1# E[1,3*h] = 1# e = np.array([0,10])### COST FUNCTION VECTOR ###c = np.zeros((4*h,1))c[0:2*h,0] = ac[2*h:4*h,0] = dc = np.array(c)### INEQUALITY CONSTRAINT VECTOR ####b = np.zeros((7*h+2,1))#b = np.zeros((7*h+1,1))b = np.zeros((8*h,1))#prod resb[0:h,0] = Production_res[0:h,1]#max stockb[h:2*h,0] = xmax*np.ones(h)b[2*h:3*h,0] = ymax*np.ones(h)#max fluxb[3*h:4*h,0] = Rb*np.ones(h)b[4*h:5*h,0] = Db*np.ones(h)b[5*h:6*h,0] = Rm*np.ones(h)b[6*h:7*h,0] = Dm*np.ones(h)### OPTIMISATION #### Declare and initialize modelf = gp.Model('stockage')#Create variablesx = f.addMVar(shape=h*4, vtype = 'c', name="x")#Define objective functionf.setObjective(c.T @ x, GRB.MINIMIZE)#Add constraints#print(np.shape(A @ x))#print(np.shape(x))#print(np.shape(b.reshape((61322,))))f.addConstr(A @ x <= b.reshape((8*h,)), name="in")#f.addConstr(E @ x == e, name="eq")f.optimize()x_res = x.X[0:h] - x.X[h:2*h]y_res = x.X[2*h:3*h] - x.X[3*h:4*h]#plt.plot(x_res+y_res, c='red', linewidth = 3)#plt.plot(np.cumsum(x_res+y_res), c='green', linewidth = 3)#plt.plot(PR[:,1])#plt.show()plt.savefig('complete_simu.png')